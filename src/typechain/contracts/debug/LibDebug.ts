/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LibDebugInterface extends utils.Interface {
  functions: {};

  events: {
    "DebugEvent(uint256)": EventFragment;
    "DebugEvent(uint256[])": EventFragment;
    "DebugEvent(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DebugEvent(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebugEvent(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebugEvent(bytes)"): EventFragment;
}

export interface DebugEvent_uint256_EventObject {
  value: BigNumber;
}
export type DebugEvent_uint256_Event = TypedEvent<
  [BigNumber],
  DebugEvent_uint256_EventObject
>;

export type DebugEvent_uint256_EventFilter =
  TypedEventFilter<DebugEvent_uint256_Event>;

export interface DebugEvent_uint256_array_EventObject {
  values: BigNumber[];
}
export type DebugEvent_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  DebugEvent_uint256_array_EventObject
>;

export type DebugEvent_uint256_array_EventFilter =
  TypedEventFilter<DebugEvent_uint256_array_Event>;

export interface DebugEvent_bytes_EventObject {
  value: string;
}
export type DebugEvent_bytes_Event = TypedEvent<
  [string],
  DebugEvent_bytes_EventObject
>;

export type DebugEvent_bytes_EventFilter =
  TypedEventFilter<DebugEvent_bytes_Event>;

export interface LibDebug extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibDebugInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "DebugEvent(uint256)"(value?: null): DebugEvent_uint256_EventFilter;
    "DebugEvent(uint256[])"(
      values?: null
    ): DebugEvent_uint256_array_EventFilter;
    "DebugEvent(bytes)"(value?: null): DebugEvent_bytes_EventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
