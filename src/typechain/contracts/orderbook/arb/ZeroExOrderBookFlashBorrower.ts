/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type IOStruct = {
  token: PromiseOrValue<string>;
  decimals: PromiseOrValue<BigNumberish>;
  vaultId: PromiseOrValue<BigNumberish>;
};

export type IOStructOutput = [string, number, BigNumber] & {
  token: string;
  decimals: number;
  vaultId: BigNumber;
};

export type OrderStruct = {
  owner: PromiseOrValue<string>;
  interpreter: PromiseOrValue<string>;
  dispatch: PromiseOrValue<BigNumberish>;
  handleIODispatch: PromiseOrValue<BigNumberish>;
  validInputs: IOStruct[];
  validOutputs: IOStruct[];
  data: PromiseOrValue<BytesLike>;
};

export type OrderStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  IOStructOutput[],
  IOStructOutput[],
  string
] & {
  owner: string;
  interpreter: string;
  dispatch: BigNumber;
  handleIODispatch: BigNumber;
  validInputs: IOStructOutput[];
  validOutputs: IOStructOutput[];
  data: string;
};

export type TakeOrderConfigStruct = {
  order: OrderStruct;
  inputIOIndex: PromiseOrValue<BigNumberish>;
  outputIOIndex: PromiseOrValue<BigNumberish>;
};

export type TakeOrderConfigStructOutput = [
  OrderStructOutput,
  BigNumber,
  BigNumber
] & {
  order: OrderStructOutput;
  inputIOIndex: BigNumber;
  outputIOIndex: BigNumber;
};

export type TakeOrdersConfigStruct = {
  output: PromiseOrValue<string>;
  input: PromiseOrValue<string>;
  minimumInput: PromiseOrValue<BigNumberish>;
  maximumInput: PromiseOrValue<BigNumberish>;
  maximumIORatio: PromiseOrValue<BigNumberish>;
  orders: TakeOrderConfigStruct[];
};

export type TakeOrdersConfigStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  TakeOrderConfigStructOutput[]
] & {
  output: string;
  input: string;
  minimumInput: BigNumber;
  maximumInput: BigNumber;
  maximumIORatio: BigNumber;
  orders: TakeOrderConfigStructOutput[];
};

export interface ZeroExOrderBookFlashBorrowerInterface extends utils.Interface {
  functions: {
    "arb((address,address,uint256,uint256,uint256,((address,address,uint256,uint256,(address,uint8,uint256)[],(address,uint8,uint256)[],bytes),uint256,uint256)[]),address,bytes)": FunctionFragment;
    "onFlashLoan(address,address,uint256,uint256,bytes)": FunctionFragment;
    "orderBook()": FunctionFragment;
    "zeroExExchangeProxy()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "arb"
      | "onFlashLoan"
      | "orderBook"
      | "zeroExExchangeProxy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arb",
    values: [
      TakeOrdersConfigStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onFlashLoan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "orderBook", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zeroExExchangeProxy",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "arb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zeroExExchangeProxy",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ZeroExOrderBookFlashBorrower extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZeroExOrderBookFlashBorrowerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arb(
      takeOrders_: TakeOrdersConfigStruct,
      zeroExSpender_: PromiseOrValue<string>,
      zeroExData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onFlashLoan(
      initiator_: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    orderBook(overrides?: CallOverrides): Promise<[string]>;

    zeroExExchangeProxy(overrides?: CallOverrides): Promise<[string]>;
  };

  arb(
    takeOrders_: TakeOrdersConfigStruct,
    zeroExSpender_: PromiseOrValue<string>,
    zeroExData_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onFlashLoan(
    initiator_: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  orderBook(overrides?: CallOverrides): Promise<string>;

  zeroExExchangeProxy(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    arb(
      takeOrders_: TakeOrdersConfigStruct,
      zeroExSpender_: PromiseOrValue<string>,
      zeroExData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    onFlashLoan(
      initiator_: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    orderBook(overrides?: CallOverrides): Promise<string>;

    zeroExExchangeProxy(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    arb(
      takeOrders_: TakeOrdersConfigStruct,
      zeroExSpender_: PromiseOrValue<string>,
      zeroExData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onFlashLoan(
      initiator_: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    orderBook(overrides?: CallOverrides): Promise<BigNumber>;

    zeroExExchangeProxy(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    arb(
      takeOrders_: TakeOrdersConfigStruct,
      zeroExSpender_: PromiseOrValue<string>,
      zeroExData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onFlashLoan(
      initiator_: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    orderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zeroExExchangeProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
