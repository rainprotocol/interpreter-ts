/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface LibMemoryKVTestInterface extends utils.Interface {
  functions: {
    "getPtr(uint256,uint256)": FunctionFragment;
    "readPtrVal(uint256)": FunctionFragment;
    "scenario0(uint256,uint256,uint256)": FunctionFragment;
    "scenario1(uint256,uint256,uint256)": FunctionFragment;
    "scenario2(uint256,uint256)": FunctionFragment;
    "scenario3(uint256,uint256,uint256)": FunctionFragment;
    "scenario4(uint256,uint256,uint256,uint256)": FunctionFragment;
    "scenario5(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "scenario6(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "scenario7(uint256,uint256[])": FunctionFragment;
    "setVal(uint256,uint256,uint256)": FunctionFragment;
    "toUint256Array(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPtr"
      | "readPtrVal"
      | "scenario0"
      | "scenario1"
      | "scenario2"
      | "scenario3"
      | "scenario4"
      | "scenario5"
      | "scenario6"
      | "scenario7"
      | "setVal"
      | "toUint256Array"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPtr",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "readPtrVal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "scenario0",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scenario1",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scenario2",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "scenario3",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scenario4",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scenario5",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scenario6",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scenario7",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint256Array",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "getPtr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readPtrVal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scenario0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scenario1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scenario2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scenario3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scenario4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scenario5", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scenario6", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scenario7", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toUint256Array",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LibMemoryKVTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibMemoryKVTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPtr(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    readPtrVal(
      ptr_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scenario0(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { array_: BigNumber[] }>;

    scenario1(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ptr_: BigNumber }>;

    scenario2(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ptr_: BigNumber }>;

    scenario3(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { val_: BigNumber }>;

    scenario4(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v0_: PromiseOrValue<BigNumberish>,
      v1_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scenario5(
      kv_: PromiseOrValue<BigNumberish>,
      k0_: PromiseOrValue<BigNumberish>,
      v0_: PromiseOrValue<BigNumberish>,
      k1_: PromiseOrValue<BigNumberish>,
      v1_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { array_: BigNumber[] }>;

    scenario6(
      kv0_: PromiseOrValue<BigNumberish>,
      kv1_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v0_: PromiseOrValue<BigNumberish>,
      v1_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scenario7(
      kv_: PromiseOrValue<BigNumberish>,
      kvPair: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { array_: BigNumber[] }>;

    setVal(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toUint256Array(
      kv_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getPtr(
    kv_: PromiseOrValue<BigNumberish>,
    k_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  readPtrVal(
    ptr_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scenario0(
    kv_: PromiseOrValue<BigNumberish>,
    k_: PromiseOrValue<BigNumberish>,
    v_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  scenario1(
    kv_: PromiseOrValue<BigNumberish>,
    k_: PromiseOrValue<BigNumberish>,
    v_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scenario2(
    kv_: PromiseOrValue<BigNumberish>,
    k_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scenario3(
    kv_: PromiseOrValue<BigNumberish>,
    k_: PromiseOrValue<BigNumberish>,
    v_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scenario4(
    kv_: PromiseOrValue<BigNumberish>,
    k_: PromiseOrValue<BigNumberish>,
    v0_: PromiseOrValue<BigNumberish>,
    v1_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scenario5(
    kv_: PromiseOrValue<BigNumberish>,
    k0_: PromiseOrValue<BigNumberish>,
    v0_: PromiseOrValue<BigNumberish>,
    k1_: PromiseOrValue<BigNumberish>,
    v1_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  scenario6(
    kv0_: PromiseOrValue<BigNumberish>,
    kv1_: PromiseOrValue<BigNumberish>,
    k_: PromiseOrValue<BigNumberish>,
    v0_: PromiseOrValue<BigNumberish>,
    v1_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scenario7(
    kv_: PromiseOrValue<BigNumberish>,
    kvPair: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  setVal(
    kv_: PromiseOrValue<BigNumberish>,
    k_: PromiseOrValue<BigNumberish>,
    v_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toUint256Array(
    kv_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getPtr(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readPtrVal(
      ptr_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scenario0(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    scenario1(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scenario2(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scenario3(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scenario4(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v0_: PromiseOrValue<BigNumberish>,
      v1_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scenario5(
      kv_: PromiseOrValue<BigNumberish>,
      k0_: PromiseOrValue<BigNumberish>,
      v0_: PromiseOrValue<BigNumberish>,
      k1_: PromiseOrValue<BigNumberish>,
      v1_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    scenario6(
      kv0_: PromiseOrValue<BigNumberish>,
      kv1_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v0_: PromiseOrValue<BigNumberish>,
      v1_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { val0_: BigNumber; val1_: BigNumber }>;

    scenario7(
      kv_: PromiseOrValue<BigNumberish>,
      kvPair: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    setVal(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint256Array(
      kv_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    getPtr(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    readPtrVal(
      ptr_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scenario0(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scenario1(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scenario2(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scenario3(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scenario4(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v0_: PromiseOrValue<BigNumberish>,
      v1_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scenario5(
      kv_: PromiseOrValue<BigNumberish>,
      k0_: PromiseOrValue<BigNumberish>,
      v0_: PromiseOrValue<BigNumberish>,
      k1_: PromiseOrValue<BigNumberish>,
      v1_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scenario6(
      kv0_: PromiseOrValue<BigNumberish>,
      kv1_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v0_: PromiseOrValue<BigNumberish>,
      v1_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scenario7(
      kv_: PromiseOrValue<BigNumberish>,
      kvPair: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setVal(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toUint256Array(
      kv_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPtr(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    readPtrVal(
      ptr_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scenario0(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scenario1(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scenario2(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scenario3(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scenario4(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v0_: PromiseOrValue<BigNumberish>,
      v1_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scenario5(
      kv_: PromiseOrValue<BigNumberish>,
      k0_: PromiseOrValue<BigNumberish>,
      v0_: PromiseOrValue<BigNumberish>,
      k1_: PromiseOrValue<BigNumberish>,
      v1_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scenario6(
      kv0_: PromiseOrValue<BigNumberish>,
      kv1_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v0_: PromiseOrValue<BigNumberish>,
      v1_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scenario7(
      kv_: PromiseOrValue<BigNumberish>,
      kvPair: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setVal(
      kv_: PromiseOrValue<BigNumberish>,
      k_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toUint256Array(
      kv_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
